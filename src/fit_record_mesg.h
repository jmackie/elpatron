////////////////////////////////////////////////////////////////////////////////
// The following FIT Protocol software provided may be used with FIT protocol
// devices only and remains the copyrighted property of Dynastream Innovations Inc.
// The software is being provided on an "as-is" basis and as an accommodation,
// and therefore all warranties, representations, or guarantees of any kind
// (whether express, implied or statutory) including, without limitation,
// warranties of merchantability, non-infringement, or fitness for a particular
// purpose, are specifically disclaimed.
//
// Copyright 2016 Dynastream Innovations Inc.
////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 16.73Release
// Tag = production-akw-16.73.00-0-gef88b3f
////////////////////////////////////////////////////////////////////////////////


#if !defined(FIT_RECORD_MESG_HPP)
#define FIT_RECORD_MESG_HPP

#include "fit_mesg.h"

namespace fit
{

class RecordMesg : public Mesg
{
public:
    RecordMesg(void) : Mesg(Profile::MESG_RECORD)
    {
    }

    RecordMesg(const Mesg &mesg) : Mesg(mesg)
    {
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns timestamp field
    // Units: s
    ///////////////////////////////////////////////////////////////////////
    FIT_DATE_TIME GetTimestamp(void) const
    {
        return GetFieldUINT32Value(253, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set timestamp field
    // Units: s
    ///////////////////////////////////////////////////////////////////////
    void SetTimestamp(FIT_DATE_TIME timestamp)
    {
        SetFieldUINT32Value(253, timestamp, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns position_lat field
    // Units: semicircles
    ///////////////////////////////////////////////////////////////////////
    FIT_SINT32 GetPositionLat(void) const
    {
        return GetFieldSINT32Value(0, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set position_lat field
    // Units: semicircles
    ///////////////////////////////////////////////////////////////////////
    void SetPositionLat(FIT_SINT32 positionLat)
    {
        SetFieldSINT32Value(0, positionLat, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns position_long field
    // Units: semicircles
    ///////////////////////////////////////////////////////////////////////
    FIT_SINT32 GetPositionLong(void) const
    {
        return GetFieldSINT32Value(1, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set position_long field
    // Units: semicircles
    ///////////////////////////////////////////////////////////////////////
    void SetPositionLong(FIT_SINT32 positionLong)
    {
        SetFieldSINT32Value(1, positionLong, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns altitude field
    // Units: m
    ///////////////////////////////////////////////////////////////////////
    FIT_FLOAT32 GetAltitude(void) const
    {
        return GetFieldFLOAT32Value(2, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set altitude field
    // Units: m
    ///////////////////////////////////////////////////////////////////////
    void SetAltitude(FIT_FLOAT32 altitude)
    {
        SetFieldFLOAT32Value(2, altitude, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns heart_rate field
    // Units: bpm
    ///////////////////////////////////////////////////////////////////////
    FIT_UINT8 GetHeartRate(void) const
    {
        return GetFieldUINT8Value(3, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set heart_rate field
    // Units: bpm
    ///////////////////////////////////////////////////////////////////////
    void SetHeartRate(FIT_UINT8 heartRate)
    {
        SetFieldUINT8Value(3, heartRate, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns cadence field
    // Units: rpm
    ///////////////////////////////////////////////////////////////////////
    FIT_UINT8 GetCadence(void) const
    {
        return GetFieldUINT8Value(4, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set cadence field
    // Units: rpm
    ///////////////////////////////////////////////////////////////////////
    void SetCadence(FIT_UINT8 cadence)
    {
        SetFieldUINT8Value(4, cadence, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns distance field
    // Units: m
    ///////////////////////////////////////////////////////////////////////
    FIT_FLOAT32 GetDistance(void) const
    {
        return GetFieldFLOAT32Value(5, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set distance field
    // Units: m
    ///////////////////////////////////////////////////////////////////////
    void SetDistance(FIT_FLOAT32 distance)
    {
        SetFieldFLOAT32Value(5, distance, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns speed field
    // Units: m/s
    ///////////////////////////////////////////////////////////////////////
    FIT_FLOAT32 GetSpeed(void) const
    {
        return GetFieldFLOAT32Value(6, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set speed field
    // Units: m/s
    ///////////////////////////////////////////////////////////////////////
    void SetSpeed(FIT_FLOAT32 speed)
    {
        SetFieldFLOAT32Value(6, speed, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns power field
    // Units: watts
    ///////////////////////////////////////////////////////////////////////
    FIT_UINT16 GetPower(void) const
    {
        return GetFieldUINT16Value(7, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set power field
    // Units: watts
    ///////////////////////////////////////////////////////////////////////
    void SetPower(FIT_UINT16 power)
    {
        SetFieldUINT16Value(7, power, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns number of compressed_speed_distance
    ///////////////////////////////////////////////////////////////////////
    FIT_UINT8 GetNumCompressedSpeedDistance(void) const
    {
        return GetFieldNumValues(8, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns compressed_speed_distance field
    ///////////////////////////////////////////////////////////////////////
    FIT_BYTE GetCompressedSpeedDistance(FIT_UINT8 index) const
    {
        return GetFieldBYTEValue(8, index, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set compressed_speed_distance field
    ///////////////////////////////////////////////////////////////////////
    void SetCompressedSpeedDistance(FIT_UINT8 index, FIT_BYTE compressedSpeedDistance)
    {
        SetFieldBYTEValue(8, compressedSpeedDistance, index, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns grade field
    // Units: %
    ///////////////////////////////////////////////////////////////////////
    FIT_FLOAT32 GetGrade(void) const
    {
        return GetFieldFLOAT32Value(9, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set grade field
    // Units: %
    ///////////////////////////////////////////////////////////////////////
    void SetGrade(FIT_FLOAT32 grade)
    {
        SetFieldFLOAT32Value(9, grade, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns resistance field
    // Comment: Relative. 0 is none  254 is Max.
    ///////////////////////////////////////////////////////////////////////
    FIT_UINT8 GetResistance(void) const
    {
        return GetFieldUINT8Value(10, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set resistance field
    // Comment: Relative. 0 is none  254 is Max.
    ///////////////////////////////////////////////////////////////////////
    void SetResistance(FIT_UINT8 resistance)
    {
        SetFieldUINT8Value(10, resistance, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns time_from_course field
    // Units: s
    ///////////////////////////////////////////////////////////////////////
    FIT_FLOAT32 GetTimeFromCourse(void) const
    {
        return GetFieldFLOAT32Value(11, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set time_from_course field
    // Units: s
    ///////////////////////////////////////////////////////////////////////
    void SetTimeFromCourse(FIT_FLOAT32 timeFromCourse)
    {
        SetFieldFLOAT32Value(11, timeFromCourse, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns cycle_length field
    // Units: m
    ///////////////////////////////////////////////////////////////////////
    FIT_FLOAT32 GetCycleLength(void) const
    {
        return GetFieldFLOAT32Value(12, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set cycle_length field
    // Units: m
    ///////////////////////////////////////////////////////////////////////
    void SetCycleLength(FIT_FLOAT32 cycleLength)
    {
        SetFieldFLOAT32Value(12, cycleLength, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns temperature field
    // Units: C
    ///////////////////////////////////////////////////////////////////////
    FIT_SINT8 GetTemperature(void) const
    {
        return GetFieldSINT8Value(13, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set temperature field
    // Units: C
    ///////////////////////////////////////////////////////////////////////
    void SetTemperature(FIT_SINT8 temperature)
    {
        SetFieldSINT8Value(13, temperature, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns number of speed_1s
    ///////////////////////////////////////////////////////////////////////
    FIT_UINT8 GetNumSpeed1s(void) const
    {
        return GetFieldNumValues(17, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns speed_1s field
    // Units: m/s
    // Comment: Speed at 1s intervals.  Timestamp field indicates time of last array element.
    ///////////////////////////////////////////////////////////////////////
    FIT_FLOAT32 GetSpeed1s(FIT_UINT8 index) const
    {
        return GetFieldFLOAT32Value(17, index, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set speed_1s field
    // Units: m/s
    // Comment: Speed at 1s intervals.  Timestamp field indicates time of last array element.
    ///////////////////////////////////////////////////////////////////////
    void SetSpeed1s(FIT_UINT8 index, FIT_FLOAT32 speed1s)
    {
        SetFieldFLOAT32Value(17, speed1s, index, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns cycles field
    // Units: cycles
    ///////////////////////////////////////////////////////////////////////
    FIT_UINT8 GetCycles(void) const
    {
        return GetFieldUINT8Value(18, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set cycles field
    // Units: cycles
    ///////////////////////////////////////////////////////////////////////
    void SetCycles(FIT_UINT8 cycles)
    {
        SetFieldUINT8Value(18, cycles, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns total_cycles field
    // Units: cycles
    ///////////////////////////////////////////////////////////////////////
    FIT_UINT32 GetTotalCycles(void) const
    {
        return GetFieldUINT32Value(19, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set total_cycles field
    // Units: cycles
    ///////////////////////////////////////////////////////////////////////
    void SetTotalCycles(FIT_UINT32 totalCycles)
    {
        SetFieldUINT32Value(19, totalCycles, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns compressed_accumulated_power field
    // Units: watts
    ///////////////////////////////////////////////////////////////////////
    FIT_UINT16 GetCompressedAccumulatedPower(void) const
    {
        return GetFieldUINT16Value(28, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set compressed_accumulated_power field
    // Units: watts
    ///////////////////////////////////////////////////////////////////////
    void SetCompressedAccumulatedPower(FIT_UINT16 compressedAccumulatedPower)
    {
        SetFieldUINT16Value(28, compressedAccumulatedPower, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns accumulated_power field
    // Units: watts
    ///////////////////////////////////////////////////////////////////////
    FIT_UINT32 GetAccumulatedPower(void) const
    {
        return GetFieldUINT32Value(29, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set accumulated_power field
    // Units: watts
    ///////////////////////////////////////////////////////////////////////
    void SetAccumulatedPower(FIT_UINT32 accumulatedPower)
    {
        SetFieldUINT32Value(29, accumulatedPower, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns left_right_balance field
    ///////////////////////////////////////////////////////////////////////
    FIT_LEFT_RIGHT_BALANCE GetLeftRightBalance(void) const
    {
        return GetFieldUINT8Value(30, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set left_right_balance field
    ///////////////////////////////////////////////////////////////////////
    void SetLeftRightBalance(FIT_LEFT_RIGHT_BALANCE leftRightBalance)
    {
        SetFieldUINT8Value(30, leftRightBalance, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns gps_accuracy field
    // Units: m
    ///////////////////////////////////////////////////////////////////////
    FIT_UINT8 GetGpsAccuracy(void) const
    {
        return GetFieldUINT8Value(31, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set gps_accuracy field
    // Units: m
    ///////////////////////////////////////////////////////////////////////
    void SetGpsAccuracy(FIT_UINT8 gpsAccuracy)
    {
        SetFieldUINT8Value(31, gpsAccuracy, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns vertical_speed field
    // Units: m/s
    ///////////////////////////////////////////////////////////////////////
    FIT_FLOAT32 GetVerticalSpeed(void) const
    {
        return GetFieldFLOAT32Value(32, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set vertical_speed field
    // Units: m/s
    ///////////////////////////////////////////////////////////////////////
    void SetVerticalSpeed(FIT_FLOAT32 verticalSpeed)
    {
        SetFieldFLOAT32Value(32, verticalSpeed, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns calories field
    // Units: kcal
    ///////////////////////////////////////////////////////////////////////
    FIT_UINT16 GetCalories(void) const
    {
        return GetFieldUINT16Value(33, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set calories field
    // Units: kcal
    ///////////////////////////////////////////////////////////////////////
    void SetCalories(FIT_UINT16 calories)
    {
        SetFieldUINT16Value(33, calories, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns vertical_oscillation field
    // Units: mm
    ///////////////////////////////////////////////////////////////////////
    FIT_FLOAT32 GetVerticalOscillation(void) const
    {
        return GetFieldFLOAT32Value(39, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set vertical_oscillation field
    // Units: mm
    ///////////////////////////////////////////////////////////////////////
    void SetVerticalOscillation(FIT_FLOAT32 verticalOscillation)
    {
        SetFieldFLOAT32Value(39, verticalOscillation, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns stance_time_percent field
    // Units: percent
    ///////////////////////////////////////////////////////////////////////
    FIT_FLOAT32 GetStanceTimePercent(void) const
    {
        return GetFieldFLOAT32Value(40, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set stance_time_percent field
    // Units: percent
    ///////////////////////////////////////////////////////////////////////
    void SetStanceTimePercent(FIT_FLOAT32 stanceTimePercent)
    {
        SetFieldFLOAT32Value(40, stanceTimePercent, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns stance_time field
    // Units: ms
    ///////////////////////////////////////////////////////////////////////
    FIT_FLOAT32 GetStanceTime(void) const
    {
        return GetFieldFLOAT32Value(41, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set stance_time field
    // Units: ms
    ///////////////////////////////////////////////////////////////////////
    void SetStanceTime(FIT_FLOAT32 stanceTime)
    {
        SetFieldFLOAT32Value(41, stanceTime, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns activity_type field
    ///////////////////////////////////////////////////////////////////////
    FIT_ACTIVITY_TYPE GetActivityType(void) const
    {
        return GetFieldENUMValue(42, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set activity_type field
    ///////////////////////////////////////////////////////////////////////
    void SetActivityType(FIT_ACTIVITY_TYPE activityType)
    {
        SetFieldENUMValue(42, activityType, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns left_torque_effectiveness field
    // Units: percent
    ///////////////////////////////////////////////////////////////////////
    FIT_FLOAT32 GetLeftTorqueEffectiveness(void) const
    {
        return GetFieldFLOAT32Value(43, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set left_torque_effectiveness field
    // Units: percent
    ///////////////////////////////////////////////////////////////////////
    void SetLeftTorqueEffectiveness(FIT_FLOAT32 leftTorqueEffectiveness)
    {
        SetFieldFLOAT32Value(43, leftTorqueEffectiveness, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns right_torque_effectiveness field
    // Units: percent
    ///////////////////////////////////////////////////////////////////////
    FIT_FLOAT32 GetRightTorqueEffectiveness(void) const
    {
        return GetFieldFLOAT32Value(44, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set right_torque_effectiveness field
    // Units: percent
    ///////////////////////////////////////////////////////////////////////
    void SetRightTorqueEffectiveness(FIT_FLOAT32 rightTorqueEffectiveness)
    {
        SetFieldFLOAT32Value(44, rightTorqueEffectiveness, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns left_pedal_smoothness field
    // Units: percent
    ///////////////////////////////////////////////////////////////////////
    FIT_FLOAT32 GetLeftPedalSmoothness(void) const
    {
        return GetFieldFLOAT32Value(45, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set left_pedal_smoothness field
    // Units: percent
    ///////////////////////////////////////////////////////////////////////
    void SetLeftPedalSmoothness(FIT_FLOAT32 leftPedalSmoothness)
    {
        SetFieldFLOAT32Value(45, leftPedalSmoothness, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns right_pedal_smoothness field
    // Units: percent
    ///////////////////////////////////////////////////////////////////////
    FIT_FLOAT32 GetRightPedalSmoothness(void) const
    {
        return GetFieldFLOAT32Value(46, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set right_pedal_smoothness field
    // Units: percent
    ///////////////////////////////////////////////////////////////////////
    void SetRightPedalSmoothness(FIT_FLOAT32 rightPedalSmoothness)
    {
        SetFieldFLOAT32Value(46, rightPedalSmoothness, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns combined_pedal_smoothness field
    // Units: percent
    ///////////////////////////////////////////////////////////////////////
    FIT_FLOAT32 GetCombinedPedalSmoothness(void) const
    {
        return GetFieldFLOAT32Value(47, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set combined_pedal_smoothness field
    // Units: percent
    ///////////////////////////////////////////////////////////////////////
    void SetCombinedPedalSmoothness(FIT_FLOAT32 combinedPedalSmoothness)
    {
        SetFieldFLOAT32Value(47, combinedPedalSmoothness, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns time128 field
    // Units: s
    ///////////////////////////////////////////////////////////////////////
    FIT_FLOAT32 GetTime128(void) const
    {
        return GetFieldFLOAT32Value(48, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set time128 field
    // Units: s
    ///////////////////////////////////////////////////////////////////////
    void SetTime128(FIT_FLOAT32 time128)
    {
        SetFieldFLOAT32Value(48, time128, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns stroke_type field
    ///////////////////////////////////////////////////////////////////////
    FIT_STROKE_TYPE GetStrokeType(void) const
    {
        return GetFieldENUMValue(49, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set stroke_type field
    ///////////////////////////////////////////////////////////////////////
    void SetStrokeType(FIT_STROKE_TYPE strokeType)
    {
        SetFieldENUMValue(49, strokeType, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns zone field
    ///////////////////////////////////////////////////////////////////////
    FIT_UINT8 GetZone(void) const
    {
        return GetFieldUINT8Value(50, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set zone field
    ///////////////////////////////////////////////////////////////////////
    void SetZone(FIT_UINT8 zone)
    {
        SetFieldUINT8Value(50, zone, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns ball_speed field
    // Units: m/s
    ///////////////////////////////////////////////////////////////////////
    FIT_FLOAT32 GetBallSpeed(void) const
    {
        return GetFieldFLOAT32Value(51, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set ball_speed field
    // Units: m/s
    ///////////////////////////////////////////////////////////////////////
    void SetBallSpeed(FIT_FLOAT32 ballSpeed)
    {
        SetFieldFLOAT32Value(51, ballSpeed, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns cadence256 field
    // Units: rpm
    // Comment: Log cadence and fractional cadence for backwards compatability
    ///////////////////////////////////////////////////////////////////////
    FIT_FLOAT32 GetCadence256(void) const
    {
        return GetFieldFLOAT32Value(52, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set cadence256 field
    // Units: rpm
    // Comment: Log cadence and fractional cadence for backwards compatability
    ///////////////////////////////////////////////////////////////////////
    void SetCadence256(FIT_FLOAT32 cadence256)
    {
        SetFieldFLOAT32Value(52, cadence256, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns fractional_cadence field
    // Units: rpm
    ///////////////////////////////////////////////////////////////////////
    FIT_FLOAT32 GetFractionalCadence(void) const
    {
        return GetFieldFLOAT32Value(53, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set fractional_cadence field
    // Units: rpm
    ///////////////////////////////////////////////////////////////////////
    void SetFractionalCadence(FIT_FLOAT32 fractionalCadence)
    {
        SetFieldFLOAT32Value(53, fractionalCadence, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns total_hemoglobin_conc field
    // Units: g/dL
    // Comment: Total saturated and unsaturated hemoglobin
    ///////////////////////////////////////////////////////////////////////
    FIT_FLOAT32 GetTotalHemoglobinConc(void) const
    {
        return GetFieldFLOAT32Value(54, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set total_hemoglobin_conc field
    // Units: g/dL
    // Comment: Total saturated and unsaturated hemoglobin
    ///////////////////////////////////////////////////////////////////////
    void SetTotalHemoglobinConc(FIT_FLOAT32 totalHemoglobinConc)
    {
        SetFieldFLOAT32Value(54, totalHemoglobinConc, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns total_hemoglobin_conc_min field
    // Units: g/dL
    // Comment: Min saturated and unsaturated hemoglobin
    ///////////////////////////////////////////////////////////////////////
    FIT_FLOAT32 GetTotalHemoglobinConcMin(void) const
    {
        return GetFieldFLOAT32Value(55, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set total_hemoglobin_conc_min field
    // Units: g/dL
    // Comment: Min saturated and unsaturated hemoglobin
    ///////////////////////////////////////////////////////////////////////
    void SetTotalHemoglobinConcMin(FIT_FLOAT32 totalHemoglobinConcMin)
    {
        SetFieldFLOAT32Value(55, totalHemoglobinConcMin, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns total_hemoglobin_conc_max field
    // Units: g/dL
    // Comment: Max saturated and unsaturated hemoglobin
    ///////////////////////////////////////////////////////////////////////
    FIT_FLOAT32 GetTotalHemoglobinConcMax(void) const
    {
        return GetFieldFLOAT32Value(56, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set total_hemoglobin_conc_max field
    // Units: g/dL
    // Comment: Max saturated and unsaturated hemoglobin
    ///////////////////////////////////////////////////////////////////////
    void SetTotalHemoglobinConcMax(FIT_FLOAT32 totalHemoglobinConcMax)
    {
        SetFieldFLOAT32Value(56, totalHemoglobinConcMax, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns saturated_hemoglobin_percent field
    // Units: %
    // Comment: Percentage of hemoglobin saturated with oxygen
    ///////////////////////////////////////////////////////////////////////
    FIT_FLOAT32 GetSaturatedHemoglobinPercent(void) const
    {
        return GetFieldFLOAT32Value(57, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set saturated_hemoglobin_percent field
    // Units: %
    // Comment: Percentage of hemoglobin saturated with oxygen
    ///////////////////////////////////////////////////////////////////////
    void SetSaturatedHemoglobinPercent(FIT_FLOAT32 saturatedHemoglobinPercent)
    {
        SetFieldFLOAT32Value(57, saturatedHemoglobinPercent, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns saturated_hemoglobin_percent_min field
    // Units: %
    // Comment: Min percentage of hemoglobin saturated with oxygen
    ///////////////////////////////////////////////////////////////////////
    FIT_FLOAT32 GetSaturatedHemoglobinPercentMin(void) const
    {
        return GetFieldFLOAT32Value(58, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set saturated_hemoglobin_percent_min field
    // Units: %
    // Comment: Min percentage of hemoglobin saturated with oxygen
    ///////////////////////////////////////////////////////////////////////
    void SetSaturatedHemoglobinPercentMin(FIT_FLOAT32 saturatedHemoglobinPercentMin)
    {
        SetFieldFLOAT32Value(58, saturatedHemoglobinPercentMin, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns saturated_hemoglobin_percent_max field
    // Units: %
    // Comment: Max percentage of hemoglobin saturated with oxygen
    ///////////////////////////////////////////////////////////////////////
    FIT_FLOAT32 GetSaturatedHemoglobinPercentMax(void) const
    {
        return GetFieldFLOAT32Value(59, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set saturated_hemoglobin_percent_max field
    // Units: %
    // Comment: Max percentage of hemoglobin saturated with oxygen
    ///////////////////////////////////////////////////////////////////////
    void SetSaturatedHemoglobinPercentMax(FIT_FLOAT32 saturatedHemoglobinPercentMax)
    {
        SetFieldFLOAT32Value(59, saturatedHemoglobinPercentMax, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns device_index field
    ///////////////////////////////////////////////////////////////////////
    FIT_DEVICE_INDEX GetDeviceIndex(void) const
    {
        return GetFieldUINT8Value(62, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set device_index field
    ///////////////////////////////////////////////////////////////////////
    void SetDeviceIndex(FIT_DEVICE_INDEX deviceIndex)
    {
        SetFieldUINT8Value(62, deviceIndex, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns left_pco field
    // Units: mm
    // Comment: Left platform center offset
    ///////////////////////////////////////////////////////////////////////
    FIT_SINT8 GetLeftPco(void) const
    {
        return GetFieldSINT8Value(67, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set left_pco field
    // Units: mm
    // Comment: Left platform center offset
    ///////////////////////////////////////////////////////////////////////
    void SetLeftPco(FIT_SINT8 leftPco)
    {
        SetFieldSINT8Value(67, leftPco, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns right_pco field
    // Units: mm
    // Comment: Right platform center offset
    ///////////////////////////////////////////////////////////////////////
    FIT_SINT8 GetRightPco(void) const
    {
        return GetFieldSINT8Value(68, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set right_pco field
    // Units: mm
    // Comment: Right platform center offset
    ///////////////////////////////////////////////////////////////////////
    void SetRightPco(FIT_SINT8 rightPco)
    {
        SetFieldSINT8Value(68, rightPco, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns number of left_power_phase
    ///////////////////////////////////////////////////////////////////////
    FIT_UINT8 GetNumLeftPowerPhase(void) const
    {
        return GetFieldNumValues(69, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns left_power_phase field
    // Units: degrees
    // Comment: Left power phase angles. Data value indexes defined by power_phase_type.
    ///////////////////////////////////////////////////////////////////////
    FIT_FLOAT32 GetLeftPowerPhase(FIT_UINT8 index) const
    {
        return GetFieldFLOAT32Value(69, index, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set left_power_phase field
    // Units: degrees
    // Comment: Left power phase angles. Data value indexes defined by power_phase_type.
    ///////////////////////////////////////////////////////////////////////
    void SetLeftPowerPhase(FIT_UINT8 index, FIT_FLOAT32 leftPowerPhase)
    {
        SetFieldFLOAT32Value(69, leftPowerPhase, index, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns number of left_power_phase_peak
    ///////////////////////////////////////////////////////////////////////
    FIT_UINT8 GetNumLeftPowerPhasePeak(void) const
    {
        return GetFieldNumValues(70, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns left_power_phase_peak field
    // Units: degrees
    // Comment: Left power phase peak angles. Data value indexes defined by power_phase_type.
    ///////////////////////////////////////////////////////////////////////
    FIT_FLOAT32 GetLeftPowerPhasePeak(FIT_UINT8 index) const
    {
        return GetFieldFLOAT32Value(70, index, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set left_power_phase_peak field
    // Units: degrees
    // Comment: Left power phase peak angles. Data value indexes defined by power_phase_type.
    ///////////////////////////////////////////////////////////////////////
    void SetLeftPowerPhasePeak(FIT_UINT8 index, FIT_FLOAT32 leftPowerPhasePeak)
    {
        SetFieldFLOAT32Value(70, leftPowerPhasePeak, index, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns number of right_power_phase
    ///////////////////////////////////////////////////////////////////////
    FIT_UINT8 GetNumRightPowerPhase(void) const
    {
        return GetFieldNumValues(71, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns right_power_phase field
    // Units: degrees
    // Comment: Right power phase angles. Data value indexes defined by power_phase_type.
    ///////////////////////////////////////////////////////////////////////
    FIT_FLOAT32 GetRightPowerPhase(FIT_UINT8 index) const
    {
        return GetFieldFLOAT32Value(71, index, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set right_power_phase field
    // Units: degrees
    // Comment: Right power phase angles. Data value indexes defined by power_phase_type.
    ///////////////////////////////////////////////////////////////////////
    void SetRightPowerPhase(FIT_UINT8 index, FIT_FLOAT32 rightPowerPhase)
    {
        SetFieldFLOAT32Value(71, rightPowerPhase, index, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns number of right_power_phase_peak
    ///////////////////////////////////////////////////////////////////////
    FIT_UINT8 GetNumRightPowerPhasePeak(void) const
    {
        return GetFieldNumValues(72, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns right_power_phase_peak field
    // Units: degrees
    // Comment: Right power phase peak angles. Data value indexes defined by power_phase_type.
    ///////////////////////////////////////////////////////////////////////
    FIT_FLOAT32 GetRightPowerPhasePeak(FIT_UINT8 index) const
    {
        return GetFieldFLOAT32Value(72, index, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set right_power_phase_peak field
    // Units: degrees
    // Comment: Right power phase peak angles. Data value indexes defined by power_phase_type.
    ///////////////////////////////////////////////////////////////////////
    void SetRightPowerPhasePeak(FIT_UINT8 index, FIT_FLOAT32 rightPowerPhasePeak)
    {
        SetFieldFLOAT32Value(72, rightPowerPhasePeak, index, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns enhanced_speed field
    // Units: m/s
    ///////////////////////////////////////////////////////////////////////
    FIT_FLOAT32 GetEnhancedSpeed(void) const
    {
        return GetFieldFLOAT32Value(73, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set enhanced_speed field
    // Units: m/s
    ///////////////////////////////////////////////////////////////////////
    void SetEnhancedSpeed(FIT_FLOAT32 enhancedSpeed)
    {
        SetFieldFLOAT32Value(73, enhancedSpeed, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns enhanced_altitude field
    // Units: m
    ///////////////////////////////////////////////////////////////////////
    FIT_FLOAT32 GetEnhancedAltitude(void) const
    {
        return GetFieldFLOAT32Value(78, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set enhanced_altitude field
    // Units: m
    ///////////////////////////////////////////////////////////////////////
    void SetEnhancedAltitude(FIT_FLOAT32 enhancedAltitude)
    {
        SetFieldFLOAT32Value(78, enhancedAltitude, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns battery_soc field
    // Units: percent
    // Comment: lev battery state of charge
    ///////////////////////////////////////////////////////////////////////
    FIT_FLOAT32 GetBatterySoc(void) const
    {
        return GetFieldFLOAT32Value(81, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set battery_soc field
    // Units: percent
    // Comment: lev battery state of charge
    ///////////////////////////////////////////////////////////////////////
    void SetBatterySoc(FIT_FLOAT32 batterySoc)
    {
        SetFieldFLOAT32Value(81, batterySoc, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Returns motor_power field
    // Units: watts
    // Comment: lev motor power
    ///////////////////////////////////////////////////////////////////////
    FIT_UINT16 GetMotorPower(void) const
    {
        return GetFieldUINT16Value(82, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

    ///////////////////////////////////////////////////////////////////////
    // Set motor_power field
    // Units: watts
    // Comment: lev motor power
    ///////////////////////////////////////////////////////////////////////
    void SetMotorPower(FIT_UINT16 motorPower)
    {
        SetFieldUINT16Value(82, motorPower, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
    }

};

} // namespace fit

#endif // !defined(FIT_RECORD_MESG_HPP)
