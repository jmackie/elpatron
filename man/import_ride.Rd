% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/file_import.R
\name{import_ride}
\alias{import_ride}
\alias{import_ride.fit}
\alias{import_ride.gpx}
\alias{import_ride.pwx}
\alias{import_ride.srm}
\alias{import_ride.tcx}
\title{Ride file parsing}
\usage{
import_ride(file_path, ...)

\method{import_ride}{fit}(file_path, raw = FALSE, make_laps = TRUE, ...)

\method{import_ride}{pwx}(file_path, ...)

\method{import_ride}{tcx}(file_path, make_laps = TRUE, ...)

\method{import_ride}{gpx}(file_path, ...)

\method{import_ride}{srm}(file_path, ...)
}
\arguments{
\item{file_path}{character string; path to the file to be read. Can be
absolute or relative.}

\item{...}{further arguments passed to or from other methods.}

\item{raw}{logical; if \code{TRUE} all data retrieved from the fit file is
returned as a list. \code{raw = FALSE} (default) will just return formatted
"records", which are generally what's expected/of interest.}

\item{make_laps}{logical; append a lap column to the data (if available)?}
}
\value{
With very few exceptions, these functions return data as a
  \code{\link[dplyr]{tbl_df}}, with the additional attribute
  \code{"file_ext"}.
}
\description{
The generic \code{import_ride} dispatches methods based on the
  file extension of \code{file_path}. See \strong{Details} for currently
  supported file formats. The default method (i.e. for unsupported formats)
  will raise an error.
}
\details{
These functions will do very little with the parsed data by default.
  This is to allow for more flexibility, but can cause headaches for batch
  analysing files of mixed formats (see \code{\link{clean_bikedata}} for a
  solution).

  Timestamps are converted to \code{\link[base]{POSIXct}} when available.

  Currently supported formats are: \itemize{
  \item{\strong{pwx:}}{Training Peaks pwx files (an XML format).}
  \item{\strong{fit:}}{Garmin fit files (a binary format).}
  \item{\strong{tcx:}{Garmin training center files (an XML format).}}
  \item{\strong{gpx:}{GPS Exchange Format (a lame XML format).}}
  \item{\strong{srm:}{SRM power control files (a binary format).}}
  }

  Tabular data are always returned as dplyr \code{\link[dplyr]{tbl}} objects.
  This ensures clean printing and makes data easier to work with.
}
\section{Notes}{
 Garmin Fit files return positional coordinates in units of
  semicircles. These are converted to degrees by default (if \code{raw =
  FALSE}).
}

\section{Acknowledgements}{

  XML file formats are parsed using the \href{http://pugixml.org/}{pugixml}
  C++ library.

  SRM parsing code was adapted from the code in the Golden Cheetah repository
  (which can be found
  \href{https://github.com/GoldenCheetah/GoldenCheetah/blob/master/src/FileIO/SrmRideFile.cpp}{here}).
}
\examples{
\dontrun{
ride_files <- list.files(
  system.file("extdata", package = "elpatron"),
  full.names = TRUE)

(f <- sample(ride_files, 1))
import_ride(f)

## If you want all data from the .fit format...
f <- grep("fit$", ride_files, value = TRUE)
import_ride(f, raw = TRUE)
}
}
\seealso{
\code{\link{clean_bikedata}} for creating consistent output from
  these functions.
}

